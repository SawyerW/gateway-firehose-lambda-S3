AWSTemplateFormatVersion: '2010-09-09'
Description: Application to receive update from yourproject webhook and send back request to get data

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W3002

Parameters:
  EnvironmentAbbr:
    Description: Abbreviation of the AWS account environment
    Type: String
  CustomDomainName:
    Type: String
    Description: The Domain name for the API
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: The ID of the hosted zone to which the resource record should be added
  CertificateARN:
    Type: String
    Description: ARN for certificate
  QueueName:
    Type: String
    Description: Name for queue
  DLQueueName:
    Type: String
    Description: Name for dead queue
  S3BucketName:
    Description: Name of s3 bucket to save messages
    Type: String

Resources:
  yourprojectS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "yourproject-${EnvironmentAbbr}"
      LifecycleConfiguration:
        Rules:
          - Id: MoveToIAStorage
            Prefix: ''
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 3
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 180
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        IgnorePublicAcls: True
        BlockPublicPolicy: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  #########################################################################
  #create queue for yourproject event
  #########################################################################
  yourprojectDestQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 2
      QueueName: !Ref QueueName
      ReceiveMessageWaitTimeSeconds: 10
      VisibilityTimeout: 180
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt yourprojectDLQ.Arn
        maxReceiveCount: 5

  yourprojectSQSPolicy: 
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Sid: "device-sqs-access"
            Action: 'sqs:*'
            Effect: Allow
            Resource: !GetAtt yourprojectDestQueue.Arn
            Principal:  
              AWS: !Sub ${AWS::AccountId}
      Queues: 
        - !Ref yourprojectDestQueue

  yourprojectDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref DLQueueName

  ########################################################################
  # create gateway to receieve http post request
  ########################################################################
  yourprojectWebhookApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway with a lambda Integration
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: yourproject-webhook-rest-api

  yourprojectApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt yourprojectApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        TimeoutInMillis: 29000
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${QueueName}"
        RequestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
        RequestTemplates:
          application/json: "Action=SendMessage&MessageBody=$input.body"
        PassthroughBehavior: "never"
        IntegrationResponses:
          - StatusCode: 200 #create a default response for the caller
            ResponseTemplates:
              application/json: '{"status":"OK"}'
      MethodResponses:
        - StatusCode: 200  
      OperationName: 'lambda'
      ResourceId: !Ref yourprojectApiGatewayResource
      RestApiId: !Ref yourprojectWebhookApi

  yourprojectApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt yourprojectWebhookApi.RootResourceId
      PathPart: 'yourproject'
      RestApiId: !Ref yourprojectWebhookApi

  yourprojectApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lpd-gateway-access-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:     
        - PolicyName: lpd-gateway-log-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource: "*"
        - PolicyName: lpd-gateway-sqs-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - sqs:SendMessage
                Effect: Allow
                Resource: !GetAtt yourprojectDestQueue.Arn          
        - PolicyName: lpd-gateway-lambda-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:InvokeFunction'
                Resource: !GetAtt yourprojectLambdaFunction.Arn 


  yourprojectApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: 'v1'
      RestApiId: !Ref yourprojectWebhookApi
      DeploymentId: !Ref yourprojectApiGatewayDeployment
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true

  yourprojectApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: "The key will be used in the header for post request"
      Enabled: true
      Name: yourproject-webhook-gateway-apikey
      StageKeys:
        - RestApiId: !Ref yourprojectWebhookApi
          StageName: !Ref yourprojectApiStage
      Value: **********

  yourprojectUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: yourprojectApiStage
    Properties:
      ApiStages:
        - ApiId: !Ref yourprojectWebhookApi
          Stage: 'v1'
      Description: Customer yourproject webhook usage plan
      Quota:
        Limit: 5000000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName: yourproject-webhook-gateway-usage-plan

  yourprojectUsagePlanApiKeyIntegration:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref yourprojectApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref yourprojectUsagePlan

  yourprojectApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: yourprojectApiGatewayMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref yourprojectWebhookApi

  ###################################################
  #create custom domain for gateway api
  ###################################################
  yourprojectDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !Ref CertificateARN
      DomainName: !Ref CustomDomainName
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  yourprojectRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref CustomDomainName
      Type: A
      AliasTarget:
        HostedZoneId:
          !GetAtt yourprojectDomainName.RegionalHostedZoneId
        DNSName:
          !GetAtt yourprojectDomainName.RegionalDomainName

  yourprojectBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: yourprojectDomainName
    Properties:
      DomainName: !Ref CustomDomainName
      RestApiId: !Ref yourprojectWebhookApi
      Stage: !Ref yourprojectApiStage
  
  ############################################################
  #create lambda function for sending http request
  ############################################################
  yourprojectLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue core-infra-v2-vpc
      GroupDescription: Security group for Lambda
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  yourprojectLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../functions/yourproject/
      Description: AWS Lambda function yourprojectLambdaFunction
      Environment:
        Variables:
          environment_abbr: !Ref EnvironmentAbbr
          DEST_S3_BUCKET: !GetAtt yourprojectS3Bucket.Arn
          BUCKET_NAME: !Ref S3BucketName
      FunctionName: 'yourproject-lambda-function'
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt yourprojectLambdaIamRole.Arn
      Runtime: python3.7
      Timeout: 60
      VpcConfig:
        SecurityGroupIds: 
          - !Ref yourprojectLambdaSecurityGroup
        SubnetIds: 
          - !ImportValue core-infra-v2-private-subnet-a
          - !ImportValue core-infra-v2-private-subnet-b
          - !ImportValue core-infra-v2-private-subnet-c

  yourprojectSSMGetParameterPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: yourproject-ssm-get-key-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Action:
              - "ssm:GetParameter"
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/Airflow/Keys/yourproject


  yourprojectLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/yourproject-lambda-function"
      RetentionInDays: 30

  yourprojectLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: yourproject-cloud-watch-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: "logs:CreateLogGroup"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: 'Allow'
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/yourproject-lambda-function:*"
        - PolicyName: yourprojectToCreateVpcResources
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'
        - PolicyName: yourproject-lambda-sqs-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility                  
                Resource: !GetAtt yourprojectDestQueue.Arn      
        - PolicyName: yourproject-lambda-s3-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:  
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource:
                  - !Sub "arn:aws:s3:::${yourprojectS3Bucket}"
                  - !Sub "arn:aws:s3:::${yourprojectS3Bucket}/*"
        - PolicyName: yourproject-lambda-generic-s3-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: "S3ReadAccess"            
                Effect: Allow
                Action:
                  - "s3:List*"
                  - "s3:Get*"                  
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${BucketName}/yourproject/*"
                    - { BucketName: !Ref S3BucketName }
              - Sid: "S3WriteAccess"
                Effect: Allow
                Action:
                  - "s3:Put*"
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${BucketName}/yourproject/*"
                    - { BucketName: !Ref S3BucketName }

      ManagedPolicyArns:
        - !Ref yourprojectSSMGetParameterPolicy

  yourprojectLambdaInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt yourprojectLambdaFunction.Arn
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt yourprojectDestQueue.Arn

  yourprojectLambdaSQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt yourprojectDestQueue.Arn
      FunctionName: !GetAtt yourprojectLambdaFunction.Arn
      
#############################
  yourprojectApiGwAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "yourprojectApiGatewayLoggingRole.Arn"
      
  yourprojectApiGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
